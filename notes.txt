QIF 2.0
- new component structure :
    qif-ui --> qif user interface
    qif-core --> qif basic classes, meant to be added in classpath as a library
    qif-shared --> contains shared classes between ui and qif-dev
    qif-dev --> the implementation of the business process, depend on qif-core for basic classes in qif, for example, in real create new module to project name, ex : qif-adminduk
- new name :
    QifTask --> class that only have one responsibility, same as version 1
    QifProcess --> replace BpFlow
    QifReceiver --> convert original input format into qif internal format
    QifAdapter --> same as version 1
    QifEvent --> replace BpListener
- use JSON for saving message content in database
- add generic in execution Qif classes, example T executeXxx(Message, ClassInput, ClassOutput)
- use ActiveMQ as embedded queue or using ExecutorServices.singleThreadExecutor for insert the log transaction, insert as batch
- separate option to save message content, audit trail
- UI for test, can upload file input or type in text area


QifEvent eventType
- scheduler_cron
- scheduler_interval
- incoming_message

QifEven eventInterface
- http_rest
- webservice_soap
- ftp
- file
- jms_queue

Java UUID Generator code example :
// need to pass Ethernet address; can either use real one (shown here)
EthernetAddress nic = EthernetAddress.fromInterface();
// or bogus which would be gotten with: EthernetAddress.constructMulticastAddress()
TimeBasedGenerator uuidGenerator = Generators.timeBasedGenerator(nic);
// also: we don't specify synchronizer, getting an intra-JVM syncer; there is
// also external file-locking-based synchronizer if multiple JVMs run JUG
UUID uuid = uuidGenerator.generate();

<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>4.3.5.Final</version>
</dependency>

<!-- for JPA, use hibernate-entitymanager instead of hibernate-core -->
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-entitymanager</artifactId>
    <version>4.3.5.Final</version>
</dependency>

<!-- optional -->

<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-osgi</artifactId>
    <version>4.3.5.Final</version>
</dependency>
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-envers</artifactId>
    <version>4.3.5.Final</version>
</dependency>
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-c3p0</artifactId>
    <version>4.3.5.Final</version>
</dependency>
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-proxool</artifactId>
    <version>4.3.5.Final</version>
</dependency>
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-infinispan</artifactId>
    <version>4.3.5.Final</version>
</dependency>
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-ehcache</artifactId>
    <version>4.3.5.Final</version>
</dependency>


    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
        <version>4.0.3.RELEASE</version>
    </dependency>